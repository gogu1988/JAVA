In this lesson, we will look at
the typical elements that you'llfind inside each layer's Modules for
the example we've been following throughoutthis course - the Doctors App.This is what the Doctors App
Architecture Canvas looks like.We have quite a few Modules.The naming conventions
have been already applied.Now, let's check what actual
elements are part of each Module.Let's start with the
foundation Modules, more specificallythe Doctor App Mobile Theme Module.In here, you should have the common
roles and built-in login logic elements.As for the Interface,
the layouts, exceptionflows and UI Screens to support
the mobile login are defined here.Regarding the Planner
theme Module, the expectedelements are the same as the ones
on the Doctor App Mobile Theme Module.The only difference is the web
login UI instead of the mobilelogin UI for the interface elements.Now, let's look at the Push
Notifications Plugin Module.In terms of data elements, you
should have input/output structuresand keep the plugin settings of
the devices accessing the application.In terms of logic elements, you
should have the actions to handlethe notifications and validations.For the Google
Calender integration Module...you have input/output structures
and a calendar Entity as data elements,as well as the logic needed to
deal with the calendar operations.A normalized API to deal
with the Google interface,and exception handlers to
support the UI Widget's behavior.Since this is an interface
element, you should expectto find a reusable UI Widget
here, to be used in different Screens.Finally, let's take a look at the
Text Messages integration Module.It is very similar to the previous
one, only with the I/O structures tosupport the normalized APIs dealing
with the external text message service andthe TextMessage configuration Entity.As logic elements, you
will have the CRUD actions todeal with the text messages
operations, normalized APIs that encapsulate thelogic to deal with external
services, and exception handlers.Now let's move on to the Core
layer, and to the Doctor App MobileBusiness Logic module specifically.As data elements, local storage
optimized to the defined requirements,temporary and specific
Screen data, session info, andthe registration process are expected.If any of these data
Entities need to be public,they should be set to read-only.In terms of logic
elements, you will have your CRUDserver actions and check role
actions to assure that only authorized usersare able to perform specific operations.The CRUD actions define
how data is manipulated.Logic to sync data from the server
to the device is also defined here.In terms of processes elements,
cleanup tasks are necessary to deleteany unnecessary or temporary data.For the Appointment
Business Logic Module...you will have the public
read-only appointment data elements.In terms of logic
elements, appointment logic actions,CRUD actions, and business
rules actions are expected.Since this is the Module
where appointments will be created,timers or business
processes might be neededto create or validate doctors'
agendas, and to send notifications.Cleanup tasks to
support information maintenanceare also expected as processes elements.Regarding the core services Modules ...mostly data elements and their
respective logic elements are expected.Meaning the read-only business
Entities with their respectiveCRUD actions and business logic.As for the Core Widgets Modules,
these will hold the definition oflogic elements to support the UI Blocks.Which means that
inside these Modules you willalso have the actual Widgets or Blocks.Now let's move up once
again to the End-User layerand to the Doctor app end-user Module.Here, the expected interface
elements are mobile Screens,with their auxiliary
structures and temporary data elements,as well as logic elements like
screen validation actions to support them.For the Appointment
Planner End-User Module ...the same elements as in the previous
Doctor App end-user Module are expected.The only difference is that
they have web Screens as interfaceelements instead of mobile Screens.And that's it.Don't miss the next
lesson, where we will introducethe application composition concepts.