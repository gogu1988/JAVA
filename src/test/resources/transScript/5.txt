In this lesson, you learn why
it's important to adopt namingconventions for the Modules you create.After covering the
suggested naming conventions,we'll go back to our
running example - the Doctors app- and apply these naming conventions.Given that different Modules
are found in different layers,thinking about their
purposes and adoptingsome naming conventions can be useful.If we look at this
architecture blueprint,it may be hard for someone
less familiar with the app tounderstand the purpose of each Module.To overcome that
difficulty, we suggest followinga naming convention for Modules.Let's see why it's important
to adopt a naming convention.Following a naming convention
helps to reveal the nature of yourModules and the elements inside of them.It also enforces the overall
reference architecture while givingyou a consistent way of looking at
the Modules with which you are working.As you begin to create larger
architecture design patterns,it will normalize those patterns
and help communication in general.As you can see, naming
conventions have a lot of benefits,and they are something you
should definitely consider.Let's go over each layer in detail.Starting by the Foundation layer.The _Lib suffix should be
used for generic library Modules.For integration
services that help consumeand normalize an external
service, we add the _I S suffix.The _Drv can be used for
specific integration services.Driver Modules can be
created to expose the same API,containing specialized implementations.You can think of these as the
drivers for different printers.You have _Th for Modules
containing your app's themeand the overall look and feel elements.The _Pat is for reusable user
interface patterns or blocks.These should be used
for layout and display.Here, since we are in
the Foundation layer,no business logic should exist.The _Plug is meant for
reusable mobile plugins.If you are creating a
mobile-specific Module,prepend an "M" to
your naming convention.For instance _MTh or _MPat.If we move on to the core
layer, Modules become business-aware.The _CS is used for
reusable core service Modules.In these, you will have public entities
and actions that are business specific.A _BL module is meant to
encapsulate business logic.Here, you will have actions
that are going to be exposed.Similarly, the _CW will
hold core Widgets or blocks.The Core Widgets Module
is where you define blocksto compose different parts of the UI.You may separate different blocks
or patterns into several Modules,depending on their lifecycle.Sometimes you need to
have very technical pieces ofbusiness logic that are heavily based on
calculations for complex business rules.For these cases, the Module
should have the _Eng suffix.You might also have the
need to synchronize data.For those cases, use _Sync.Isolating this kind of logic makes the
Core Service completely system agnostic,and makes it easier to decouple
or replace parts of the system.The _API should be for
a technical wrappers thatexpose an API to any external consumers.Once again, if you are
creating mobile applications,you can add an "M" in
front of the naming conventionfor the mobile-specific Modules.Knowing how to name Modules
consistently in the foundationlayer and core layer can
be important, since these twolayers have the most reusable services.For end-user layer Modules, the
Module name ends up being part of the URL,so the only recommendation is
that they should be short, direct,and meaningful for the end-users.To understand these concepts better,
let's apply these naming conventionsto our previous doctors app example.Starting from the top,
in the end-user layer,there is no need to apply any
naming convention to these two Modules.Since their names
make sense and are short,it will be ok if they end-up in a URL.The only change is removing
the spaces in the Module names.Going down, to the core layer,
these four reusable Modules should handlethe core entities of our
application, with their public entities,actions, and blocks.Since these are core services,
we add the _CS naming convention.The Appointment Logic
Module will include the actionsto orchestrate the other core services.This business logic
should support most ofthe doctor application's business rules.So the _BL naming convention is applied.The Doctor App Mobile
Module will handle thesynchronization of information
between the mobile device and the server,while supporting all the core logic.So it should be renamed to _MBL.Regarding both Modules
containing business-related widgets ...the _MCW and _CW naming
conventions are applied.Going further down to
the Foundation layer.The Push Notifications Plugin
Module is a mobile plugin service.So we add _Plug.The Google Calendar and Text
Messages Modules are integrationservices with external systems.So they should be
renamed to _I S Modules.The Doctor App Theme and
Planner are theme Modules.So they should be renamed to
_MTh and _Th Modules respectively.To recap, these are the
suggested naming conventions.You don't have to use
exactly these naming conventions.They are not mandatory.You could develop your
own naming conventionsand apply them in a way that makes
sense for you and for your business.However, it's useful to define and
follow a set of naming conventions.In the end, it ensures alignment
and eases the understanding of the typeof elements that will be in each Module.