In this lesson, we will look atthe typical elements that you'llfind inside each layer's Modules forthe example we've been following throughoutthis course - the Doctors App. This is what the Doctors AppArchitecture Canvas looks like. We have quite a few Modules. The naming conventionshave been already applied. Now, let's check what actualelements are part of each Module. Let's start with thefoundation Modules, more specificallythe Doctor App Mobile Theme Module. In here, you should have the commonroles and built-in login logic elements. As for the Interface,the layouts, exceptionflows and UI Screens to supportthe mobile login are defined here. Regarding the Plannertheme Module, the expectedelements are the same as the oneson the Doctor App Mobile Theme Module. The only difference is the weblogin UI instead of the mobilelogin UI for the interface elements. Now, let's look at the PushNotifications Plugin Module. In terms of data elements, youshould have input/output structuresand keep the plugin settings ofthe devices accessing the application. In terms of logic elements, youshould have the actions to handlethe notifications and validations. For the GoogleCalender integration Module. . . you have input/output structuresand a calendar Entity as data elements,as well as the logic needed todeal with the calendar operations. A normalized API to dealwith the Google interface,and exception handlers tosupport the UI Widget's behavior. Since this is an interfaceelement, you should expectto find a reusable UI Widgethere, to be used in different Screens. Finally, let's take a look at theText Messages integration Module. It is very similar to the previousone, only with the I/O structures tosupport the normalized APIs dealingwith the external text message service andthe TextMessage configuration Entity. As logic elements, youwill have the CRUD actions todeal with the text messagesoperations, normalized APIs that encapsulate thelogic to deal with externalservices, and exception handlers. Now let's move on to the Corelayer, and to the Doctor App MobileBusiness Logic module specifically. As data elements, local storageoptimized to the defined requirements,temporary and specificScreen data, session info, andthe registration process are expected. If any of these dataEntities need to be public,they should be set to read-only. In terms of logicelements, you will have your CRUDserver actions and check roleactions to assure that only authorized usersare able to perform specific operations. The CRUD actions definehow data is manipulated. Logic to sync data from the serverto the device is also defined here. In terms of processes elements,cleanup tasks are necessary to deleteany unnecessary or temporary data. For the AppointmentBusiness Logic Module. . . you will have the publicread-only appointment data elements. In terms of logicelements, appointment logic actions,CRUD actions, and businessrules actions are expected. Since this is the Modulewhere appointments will be created,timers or businessprocesses might be neededto create or validate doctors'agendas, and to send notifications. Cleanup tasks tosupport information maintenanceare also expected as processes elements. Regarding the core services Modules . . . mostly data elements and theirrespective logic elements are expected. Meaning the read-only businessEntities with their respectiveCRUD actions and business logic. As for the Core Widgets Modules,these will hold the definition oflogic elements to support the UI Blocks. Which means thatinside these Modules you willalso have the actual Widgets or Blocks. Now let's move up onceagain to the End-User layerand to the Doctor app end-user Module. Here, the expected interfaceelements are mobile Screens,with their auxiliarystructures and temporary data elements,as well as logic elements likescreen validation actions to support them. For the AppointmentPlanner End-User Module . . . the same elements as in the previousDoctor App end-user Module are expected. The only difference is thatthey have web Screens as interfaceelements instead of mobile Screens. And that's it. Don't miss the nextlesson, where we will introducethe application composition concepts. 