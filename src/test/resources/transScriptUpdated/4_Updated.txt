In this lesson, we aregoing to apply the architecturedesign process in a specificbusiness case: a Doctors Appointments app. After following the threesteps of the design process,we will get to thearchitecture blueprint and reference map. We will follow the architecturedesign process for a hospital-related app. This app enables the managingof hospital doctors' appointments. In total, we have fiverequirements listed here. We'll go by each one of these aswe build up our Architecture Canvas. We will start with an emptyArchitecture Canvas by the Disclose step. Starting by the first requirement,you'll need to identify the end-userprocesses that needs to be supported. In this case, doctors need to seetheir agenda and their patients' exams,and to be able to select urgent cases. Since these are userprocess concepts, they shouldbe organized in the end-user layer. Here, we are placing concepts intothe correct layers as we identify them. This is actually part of theOrganize step in the design process. The "Doctor" represents acore business concept thatwill have to be mapped in your system. So the "Doctor" conceptshould be part of the core layer. It is also possible toidentify the "exam" concept,and to relate each exam to a patient. So both these conceptsshould be taken into account. They too belong to the core layer. Moving on to the secondrequirement: Doctors work in differentunits from different hospitals. Besides doctors, whichare already represented,we can identify two moreconcepts: Units and Hospitals. Once again, these areorganized in the core layer. The third requirement allows usto expand our canvas a bit more. From it, we learn that GoogleCalendar is used to represent the appointmentsand find the doctors' availability. The "Appointment" corebusiness concept can be identified. It is actually basedon other core concepts. An appointment willoccur at a given hospital,with a specificdoctor, and a certain patient. It should also have atime slot, along withsome additional information that willbe represented inside the appointment. The application willneed to interact with GoogleCalendar to represent appointmentsand to find the doctors' availability. Since this is anintegration with an external system,it should be part ofthe foundation layer. This is where integrations belong. Regarding thefourth requirement, we canextract that doctors will be notified. This will happen viatext message (SMS) orpush notification when they are online. This result can be achievedwith external systems; therefore,these should also bepart of the foundation layer. Finally, requirementfive tells us about aweb application to manage appointments. In this case, you have onemore end-user layer concept. For now, the Disclose andOrganize steps should be over. Next in the process isgoing over the Assemble step. So let's think about how theseconcepts translate into Modules. First, looking at thedoctor processes, theycan live together in the same mobileModule because you don't need to haveseparate lifecycles for these processes. So you assemble these threeconcepts into the Doctor Mobile app. The "Exam" conceptshould live in it's own Module. The same thing happenswith the "Doctor" concept. And the Patient concept. Here's an example where you canmerge two concepts into a single Module. Since units are related tohospitals, it makes no senseto deal with units without hospitals. So these two willbecome the Hospital Module. "Appointment" should be a Moduleorchestrating the other core Modules. Given that you want tocreate a mobile application,we will also need local storage. For that reason, youshould also create a specificModule to handle the local data andsynchronization of information betweenthe mobile device and the server. For both the Doctor mobileand Appointment Planner web app,Widgets or blocks will be needed. It is a good practice to isolatethose elements into specific Modules. Google Calendar provide thefunctionality to access the calendar. Text Messages and PushNotification Modules provide access to featuresso that doctors can be notified. These should be done throughintegration Modules on the server-side,so web and mobileapplications can also reuse them. Finally, you canhave different themes . . . . . .  one for the plannerweb application and anotherfor the doctor mobile application. These are all the Modulesthat have been identifiedduring the architecture design process. We call this thearchitecture blueprint, and it showsall Modules in their specific layers. As you identifydependencies between Modules,you can add arrows and obtainthe architecture reference map. Each of the end-user Modulesdepends on the respective theme. Each of the end-user Modulesalso depends on the respectiveWidgets Modules in the core layer. The Doctors app alsodepends on the Push NotificationsPlugin to enable registering with thePush Notification third-party service. The Doctor App alsorelies on the Doctor MobileModule for the local storage data,which in turn consumes informationfrom the Doctor and Appointment Modules. The Appointment Planner web appwill need to reference the AppointmentModule in order to manage appointments. As we've mentionedbefore, the AppointmentModule orchestrates the Hospital,Doctor, Exam, and Patient Modules. It also relies on theGoogle Calendar, Text Messages,and Push Notifications integrations. The Doctor core Module dependson the Exam and Patient Modules. This gets us to the end of our example. Don't miss our next lessons,where we will talk about the importanceof naming conventions forModules, using the same example. 