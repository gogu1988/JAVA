In this lesson, you learn whyit's important to adopt namingconventions for the Modules you create. After covering thesuggested naming conventions,we'll go back to ourrunning example - the Doctors app- and apply these naming conventions. Given that different Modulesare found in different layers,thinking about theirpurposes and adoptingsome naming conventions can be useful. If we look at thisarchitecture blueprint,it may be hard for someoneless familiar with the app tounderstand the purpose of each Module. To overcome thatdifficulty, we suggest followinga naming convention for Modules. Let's see why it's importantto adopt a naming convention. Following a naming conventionhelps to reveal the nature of yourModules and the elements inside of them. It also enforces the overallreference architecture while givingyou a consistent way of looking atthe Modules with which you are working. As you begin to create largerarchitecture design patterns,it will normalize those patternsand help communication in general. As you can see, namingconventions have a lot of benefits,and they are something youshould definitely consider. Let's go over each layer in detail. Starting by the Foundation layer. The _Lib suffix should beused for generic library Modules. For integrationservices that help consumeand normalize an externalservice, we add the _I S suffix. The _Drv can be used forspecific integration services. Driver Modules can becreated to expose the same API,containing specialized implementations. You can think of these as thedrivers for different printers. You have _Th for Modulescontaining your app's themeand the overall look and feel elements. The _Pat is for reusable userinterface patterns or blocks. These should be usedfor layout and display. Here, since we are inthe Foundation layer,no business logic should exist. The _Plug is meant forreusable mobile plugins. If you are creating amobile-specific Module,prepend an "M" toyour naming convention. For instance _MTh or _MPat. If we move on to the corelayer, Modules become business-aware. The _CS is used forreusable core service Modules. In these, you will have public entitiesand actions that are business specific. A _BL module is meant toencapsulate business logic. Here, you will have actionsthat are going to be exposed. Similarly, the _CW willhold core Widgets or blocks. The Core Widgets Moduleis where you define blocksto compose different parts of the UI. You may separate different blocksor patterns into several Modules,depending on their lifecycle. Sometimes you need tohave very technical pieces ofbusiness logic that are heavily based oncalculations for complex business rules. For these cases, the Moduleshould have the _Eng suffix. You might also have theneed to synchronize data. For those cases, use _Sync. Isolating this kind of logic makes theCore Service completely system agnostic,and makes it easier to decoupleor replace parts of the system. The _API should be fora technical wrappers thatexpose an API to any external consumers. Once again, if you arecreating mobile applications,you can add an "M" infront of the naming conventionfor the mobile-specific Modules. Knowing how to name Modulesconsistently in the foundationlayer and core layer canbe important, since these twolayers have the most reusable services. For end-user layer Modules, theModule name ends up being part of the URL,so the only recommendation isthat they should be short, direct,and meaningful for the end-users. To understand these concepts better,let's apply these naming conventionsto our previous doctors app example. Starting from the top,in the end-user layer,there is no need to apply anynaming convention to these two Modules. Since their namesmake sense and are short,it will be ok if they end-up in a URL. The only change is removingthe spaces in the Module names. Going down, to the core layer,these four reusable Modules should handlethe core entities of ourapplication, with their public entities,actions, and blocks. Since these are core services,we add the _CS naming convention. The Appointment LogicModule will include the actionsto orchestrate the other core services. This business logicshould support most ofthe doctor application's business rules. So the _BL naming convention is applied. The Doctor App MobileModule will handle thesynchronization of informationbetween the mobile device and the server,while supporting all the core logic. So it should be renamed to _MBL. Regarding both Modulescontaining business-related widgets . . . the _MCW and _CW namingconventions are applied. Going further down tothe Foundation layer. The Push Notifications PluginModule is a mobile plugin service. So we add _Plug. The Google Calendar and TextMessages Modules are integrationservices with external systems. So they should berenamed to _I S Modules. The Doctor App Theme andPlanner are theme Modules. So they should be renamed to_MTh and _Th Modules respectively. To recap, these are thesuggested naming conventions. You don't have to useexactly these naming conventions. They are not mandatory. You could develop yourown naming conventionsand apply them in a way that makessense for you and for your business. However, it's useful to define andfollow a set of naming conventions. In the end, it ensures alignmentand eases the understanding of the typeof elements that will be in each Module. 