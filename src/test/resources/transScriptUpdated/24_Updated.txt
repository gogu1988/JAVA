Hi there, and welcome to this session onExtracting Elements without ImpactingConsumers.  So, extracting elements is anapproach to refactoring that we can usewhen we need to pull something out of aparticular module that is being consumedby other modules so we'd like to goahead and break up the original moduleand extract things without impacting theconsumers so we wouldn't want to have tochange anything but the piece of codethat seems to be the problem that we'retrying to refactor so we're gonna goahead and explain that and we'll startby looking at in the big picture and allin one view but then we'll actuallybreak it down into a step by step andwe'll look at detailed views of each ofthose steps and we're going to belooking at a particular scenario andwhile we look through that scenario bythe time we get to the end we just wantto mention other scenarios that thisprocess will work for so let's go aheadand get started so if we think ofextracting a service without impactingconsumers and we think of the mosttypical scenario that we will find thisin that would be when we have an enduser module which we'll call X and Xhappens to have the end user elementsthat we would expect but there are alsoa number of other elements that arebeing reused and consumed by othermodules maybe they're being consumed byother end-user modules or anorchestration module maybe even some ofthe things here are being reused by acore module but what's important is thatwe identify the elements that are beingconsumed and we want to sort of refactorand get those out of this module so thatwe don't have any sideways referencesand we don't have any upward referencesso to be able to do thatwe'll make a clone so we'll take ouroriginal module X will now have a cloneof it which will be called clone of Xand with these two duplicate copies whatwe want to do is take the first one andrename it and call it X underscore CSfor the core serviceand that we renamed it this way becausethis is going to be the module that isgoing to contain all of the consumedelements that we care aboutnow we'll also take our duplicate cloneand we're going to rename that X andwe're going to give it the name of theoriginal module and the reason we dothat is so that when these end-usercomponents that are being accessed likescreens if we give it the same name thennone of the URLs for the screens thatwe've created will be broken so we stillhave to duplicate copies of our originalmodule which have been called X we havea newer copy which is now called X andwe have the original copy which hasunderscore CS for core service so whatwe would need to do is come in to thismodule and only keep the elements insideof it that are being consumed and any oftheir dependencies so basically we'regoing to go into this module and we'regoing to delete all of the end-userelements and only keep the reusableservice and we'll go over to ourduplicate copy that we've called X andwe'll do the opposite we'll remove allof the consumed components all of thecore service components and we'll onlykeep the end-user modules and userelements in the module now this createsa problem for this particular module andthe fact that this module needs some ofthose consumed services and it no longerhas them so true change would be givingus an error here but what we can do iswe can create a reference to the newcore service module that's been createdand now these two components will beconsistent and will be fine so whatwe've really done is taken one modulethat got too bulky and and/oraccidentally started making availablereusable elements and we've broken itinto two pieces but we've done it in away that doesn't affect any of theconsumers and doesn't affect any of theend-users that are trying to get to thescreennow I went through these seven stepspretty fast and if you didn't follow allof that do not be concerned we're goingto go through each step step by step andin a little bit better way from agraphics perspective to help youunderstand it a little better so if wego step by step and say alright what didwe do in the first step well we said wewanted to identify consumed elements soto be able to do that we looked insideof our module X and we found some endusers components that we expected but wealso found something that looked morelike a service that was being consumedso we identified which elements arebeing consumed and we started thinkingabout we need to get these out and andrefactor them into their own module sothe second step is to clone this moduleso if we officially clone the modulethen we get clone of X and over here youcan see we have the end-user componentsthe elements and the consumed elementsso now we have two duplicate copiesagain that we talked about and and theyare clones of each other so the thirdstep is to rename our original module Xto X for the core service so if we wentahead and renamed this now we have Xcore service and we don't really havethis other module because now it's justbeen renamed and what's important hereis what we mentioned which is theoriginal module is now a core module itstill has these consumed elements so noone who is actually consuming any ofthese elements will end up with any typeof error the renaming doesn't affectthese elements that are inside of themodule so the fourth step was to renamethe clone and give it the original namewhich was X so if we go ahead and renamethe clone of X to X then what we'rereally left with is just X and X understore cs4 core service our clone modulegets the name of the original module andthat's what helps our URLs not beingaffectedokay so step 5 we want to keep theconsumed elements in the new X under Xunderscore core service and delete theothers so what we're really doing is tothe module down here we're getting ridof the UI elements that we don't needbecause if this is going to be a coreservice we only want the things that arebeing consumed and once we've done thisthis no longer is an end user module inany way it doesn't have any end userelements so it is a core service so ifwe put it on the canvas it should be ayellow core service module so here we'vegone ahead and changed the color stepsix says go to our clone that has theoriginal name and delete all theelements that we kept in the coreservice because all we really want inthis particular module is the end userelements so if we delete the consumedelements that doesn't create any kindsof problems here it doesn't change theway the actual module is being viewedbut these end-user modules werereferencing the consumed elements thatwere inside of the module to begin withso what your change is going to throw anerror and say that we have a problembut it's fairly easy for us to go aheadand fix that problem because all we needto do is create the reference for X toget back to the consumed elements so allwe do is we create a reference and nowthese two modules together are providingthe exact same components but we've nowfactored out the core service so it canbe consumed by other modules besides thetwo that we have here so the referenceresolves all the broken dependenciesthat we had in X and all the resourcesare now reconnected without any problemsso this gives us you know that wholescenario in a very detailed step-by-stepprocess so again to kind of summarize wego in and identify the consumed elementswe make a clone that gives us aduplicate copy we rename this oneso it can be a core service and then werename the clone so it can be theoriginal as far as the user interfaceelements are concerned we delete thethings that we don't need from the coreservice we delete the things that wedon't need from the end-user module andthen we just create the reference backso that we end up with what we need soif you try to think of this as a in avery high high level summary way what westarted with was a module that reallyhad two sets of elements inside of itand what we did in our seven stepprocess is managed to break it apartinto two different modules thatreference the the end user referencesthe consumed components but it reallythis is all we did and it took us anumber of steps to get here but welooked at the elements we identifiedinside of here and broke them up so thatthey can be contained separately indifferent modules and now this onebecomes a highly reusable servicebecause we don't want any reusableservices in an end-user module so thisis you know the summary of what we whatwe did now something that's important tonote is that sometimes people will getcaught up in oh there's a seven stepprocess and we're always looking for theend-user component and then the consumedcomponent and we're always going tobreak things up that way well there area lot of different scenarios that couldoccur and the reason we named thismodule the the idea of extractingelements is that we could have a modulethat unfortunately not only has its enduser capabilities and it has things thatare being consumed but they're twototally different sets of things thatare being consumed by different types ofmodules and different types of consumersso in that case we we may go throughmore a very similar set of steps butmore than seven steps to extract all ofthese pieces but we might end up doingis taking consumed one and put it insideof a core service module we might takeconsume two and put it at a differentcore service module and then we might goahead and take our end user elements andkeep them inthe ex and user module and in this casemaybe the end-user module needs consumedone elements but it doesn't actually useany of the consumed two elements becausesome other consumer is actually usingconsumed two elements not the X modulethat that was part of the originalmodule so this scenario can have anumber of different ways and and this isone that's fairly normal where sometimesyou go to refactor and you see not justone set of things that are beingconsumed but really two in which itwouldn't make sense for us to go aheadand put consumed one and consume two inthe same module because these twoconsumers of those components may havedifferent life cycles and these thingsmay be changed at different rates so wedon't always have just one servicethat's being consumed that's onescenario to think about the otherscenario to think about is that we'vebeen looking at end user and coreservices but those aren't the only typesof modules and the only layers that thisscenario could happen in what if westarted with a core service that wefound another reusable service inside ofbut that reusable service was atechnical component it didn't have anybusiness logic it didn't have any typeof business concepts so it was atechnical thing well we could refactorthe core service from the library and dothe same type of thing and in fact thishappens occasionally this is a littlebit easier to refactor because you canmake the clone and you don't have toworry so much about the naming becausewe're not trying to keep the URL for theend users but this is another very validscenario that can occur and we can usethis same type of refactoring techniqueto be able to go ahead and solve thisproblemso in review in this session we talkedabout extracting elements withoutimpacting the consumer and we wentthrough it in a detailed step-by-stepfashion and talked about differentscenarios that can occur so hopefullythis helps you with refactoring andwe'll make it easier for you to havereally good modules and really goodarchitectures in the futureso that's it for extracting elementswith it without impacting consumersthanks for listening