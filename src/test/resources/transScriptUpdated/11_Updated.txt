In this lesson, you will getto know some important tools youcan use to validate your architecture. These tools willautomatically perform an analysison your Modules andapplications, allowing you to thencheck the findings and understand howyou can mitigate them to make sure yourapplications are sound and performant. The tools are Discoveryand Architecture Dashboard. It is possible to inspectyour architecture manually,but it will definitely bea challenge, especially ifyou are dealing with a complex project. Besides taking a long time, amanual validation can lead to overseeingissues and violations that couldnegatively impact your architecture. Using tools toinspect your modules and appswill make thevalidation process faster, safer,and more efficient. Two validation tools can be used:Discovery and Architecture Dashboard. Discovery is a visualtool that helps you analyze,measure, and understand howto improve your architecture. It is available as a freedownload at OutSystems Forge. Discovery can be used to validateyour modules and application architecture,as it provides information concerningthe module and application dependenciesas well as the architecture validationrules discussed in the previous videos. The tool provides avisualization of the modules,which are automatically classifiedin the Architecture Canvas layers,based on their naming convention. However, it is alsopossible to manually change themodule to a different layer at any time. With the modules classified perlayer, the tool analyzes the dependenciesamong modules and also identifiesthe elements referenced in each module. At any time, you can check theelements the module is consuming from others,as well as the elements from themodule that are being consumed by others. If that is the case, it alsoindicates the architecture validationrules that are not being properlyapplied by pinpointing the consumedelements that are causing the findingand suggesting a possible improvement. This feature isextremely helpful to identifyany issues in your architecture. Discovery also has aview for applications,indicating the applicationdependencies and the validationrules that are not being applied. The second tool isArchitecture Dashboard,which is the tool to monitorthe OutSystems technical debt. Architecture Dashboard enablesusers to visualize their applicationportfolios and identify problems,while also helping developers follow bestpractices and avoid common pitfalls. This tool is free for customersand is fully supported by OutSystems. The Architecture Dashboardperforms two different types of analyseswhich combine to provide added contextand greater relevance in findings: CodeAnalysis with the goal ofuncovering patterns related to performance,security,architecture, and maintainability;and Runtime Performance Analysis,using the analytics data from LifeTime. The tool displays a listof code patterns that can besorted by technical debt and frequency. Each code found has a sectionindicating the impact of the patternand sharing some tips on how to fix it. The tool has a view of theapplications in the infrastructure,with the possibility of analyzing thecode patterns within each application. The tool follows acolor code with five levels:red indicates a low level of agility andgreen indicates a high level of agility. The higher the levelof agility the better,since they have a smallernumber of code patterns found,or patterns that arenot as impactful as others. Architecture Dashboard alsoprovides a view of the moduleswithin each application with asimilar color code and allows an analysisof the code patterns within each module. Different team members withdifferent focuses and needs can use bothDiscovery and Architecture Dashboard. For an architect, it will helpcheck the technical debt of all the appsin the infrastructure andunderstand how an architecture is evolving. It will allow team leads to checkthe technical debt of their team's apps. It is also useful forDevelopers, who can find andfix technical debt in an app and makesure they are following best practices. In the next lesson, you willsee demos of these tools, tohelp you better understand how you canuse them to validate your architecture. 