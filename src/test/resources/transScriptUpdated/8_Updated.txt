In this session, we'll get backto what OutSystems applications are. After that, we'll see howModules are composed into thearchitecture canvas for applications. All of this will getmore clear as we returnto the Doctors App example and applythe application composition process. If you remember fromService Studio, an applicationis composed of a set of Modules. These Modules can containany kind of elements: screens,logic, data, and evenprocesses.  But why is this important?In OutSystems, whenyou deploy your code intothe Quality or Productionenvironments, you actually deploy applications. So, you have to select one ormore apps and then deploy them. When one app has dependecies onothers, in order to actually move forwardwith the deployment you may need toadd more apps to your deployment plan. So, in this context, anapplication is the smallest deployment unit. Similar to Modules,applications also have a canvas. The layers are the same;however, within each layerwe will have apps instead of Modules. An app layer is defined by thetopmost Module layer inside of it. Let's see this in more detail. If the app onlycontains Foundation Modules,then it is a Foundation app. If the app is composed ofCore Modules, then it's Core app. If the app is composed ofboth Core and Foundation Modules,the app is stillcategorized as a Core app. The topmost Module is aCore Module; therefore,it is a Core app. Apps composed only of End-UserModules are considered End-User apps. If the app contains core orfoundation Modules as well as end-userModules it is still an End-User app. The topmost Moduleis an End-User Module. The same is true ifthe app contains all kindsof Modules - it is also an End-User app. Let's recover our runningexample â€” the Doctors app. Now, by looking at thedependencies between Modules,let's try to group them and initiatethe application composition process. First, to the right we have an emptyArchitecture Canvas for applications. We'll move theModules from the left canvas,group them, and place theminto the canvas to the right. Remember that theDoctor mobile core Widgets,mobile business logic,and the Doctor App themeare exclusive to the Doctor application. So we can package them togetherinto the Doctor App application. As the topmost Module ofthis application is an End-UserModule,this is an End-User application. Similarly, thePlanner theme, core Widgets,and the corresponding Web Module canbe packaged into the same application. So you will have theAppointment Planner application. Once again, this is alsoan End-User application,since it contains one End-User Module. In the core layer,an option is to composeall the core services and businesslogic Modules into a single application. So the Hospital CoreServices applicationcould be created with these Modules. Since all Modules are coreModules, this is a Core application. Push Notifications Plugin Moduleshould be kept in its own application. Therefore, the PushNotification Plugin application is created. Both integration servicescan be packaged together. So AppointmentIntegration Services is defined. Here, since the topmost Module ofthis application is a Foundation Module,this is a Foundation application. So here's one possibleoutcome that constitutes a validarchitecture in terms of applications. Remember that the goal is tomake your deployments easier. Make sure your applicationsreflect the different life cyclesof the Modules and adjust as needed. 