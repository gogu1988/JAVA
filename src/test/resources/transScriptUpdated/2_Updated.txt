In this lesson, we'll introduce youto the OutSystems Architecture Canvas. We'll start the sessionby discussing what it is,and then cover why it is important. By the end, we'll see how thecanvas fits in an enterprise ecosystem. Starting with the what . . . The Architecture Canvas isthe adopted framework to designapplication architecture in OutSystems. It provides a systematicapproach to speed up architecture design. It is a multi-layerframework, composed of three layers. Foundation, Core, and End-user. The two bottom layers are whereall the reusable services will beisolated and mapped in this framework. More specifically, theFoundation layer contains all reusable,non-functional,business-agnostic Modulessuch as connectors to externalsystems, libraries, reusable UI patterns,and themes. In this layer, you should nothave any business-specific services. In the Core layer we willimplement core business services. These include the servicesaround business concepts such astheir dependencies and business rules. These core businessservices should be system agnosticand abstract integration detailsfrom the underlying foundation services. Finally, at the topyou have the end-userlayer that should not have any services. Here, you will supportall your user interactionsthrough user interfaces and processes. Now, let's see why youshould use the Architecture Canvas. It promotes the correct abstractionof reusable services and components. Understanding andhaving a clear definitionof the dependencies among all partshelps optimize lifecycle independence. Finally, it helps youminimize the impact of changes. This leads to easier maintenance andmore efficient application evolution. Now, let's see how theArchitecture Canvas andyour application architecture workside by side in your enterprise ecosystem. OutSystems is one moretechnology in your IT ecosystem. So you'll probably need tointegrate it with other existingin-house or cloud-based systems. To achieve that level ofintegration, you can have integration services,which are merely technicalwrappers to external producers. The main goal of these servicesis to normalize data structuresand abstract integration complexity,like error handling and authentication. Remember that theFoundation layer is wherenon-functional requirements aredefined, which are business agnostic and maybe reused across any business domain. The Core layer, inaddition to the core services,will contain all thebusiness rules, transactions,and data. You may also have APIs to beconsumed by external systems. These interfaces defineinteractions between the internal core servicesand external consumers usingREST, SOAP, or any other type of API. Finally, the applicationsin the end-user layer willserve both intranet and extranet users. Now you know theArchitecture Canvas, why it is important,and how it helps buildapplication architecture in OutSystems. 